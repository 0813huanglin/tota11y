/**
 * A plugin to identify unlabeled inputs
 */

var $ = require("jquery");
var Plugin = require("../base");
var annotate = require("../shared/annotate");

require("./style.less");

const LABEL_CLASS = "tota11y-label-highlight";

class LabelsPlugin extends Plugin {
    getTitle() {
        return "Labels"
    }

    getDescription() {
        return "Identifies inputs with missing labels"
    }

    // Test for inputs that require a label.
    //
    // A "label" includes one of the following
    //   - a label with a `for` attribute matching the `id` of the input
    //   - a label wrapping the input
    //   - an `aria-label` attribute
    //   - an element whose `id` matches the input's `aria-labeledby`
    //     value
    //
    // TODO: aria-describedby?
    hasValidLabel($el) {
        // Check for a label tag whose `for` matches the `id` of the input
        var id = $el.prop("id");
        if (id && $(`label[for="${id}"]`).text()) {
            return true;
        }

        // Check if the input is wrapped in a label
        if ($el.parents("label").length > 0) {
            return true;
        }

        return false;
    }

    run() {
        const assert = ($el, condition, message) => {
            if (!condition) {
                annotate.highlight($el, LABEL_CLASS);

                // Wrap element in a tooltipped span
                $el.wrap(
                    $("<span>").addClass("tota11y-tooltipped")
                               .attr("data-content", message));
            }
        }

        const $inputs = $("button, input, select, textarea");

        $inputs.each((i, el) => {
            const $el = $(el);

            // Ignore inputs inside of tota11y itself
            if ($el.parents(".tota11y-toolbar").length > 0) {
                return;
            }

            // Ignore disabled inputs and inputs with `type="hidden"`
            if ($el.is("[disabled], [type='hidden']")) {
                return;
            }

            // Submit and reset inputs provide their own labeling
            if ($el.is("[type='submit'], [type='reset']")) {
                return;
            }

            if ($el.is("button")) {
                return assert($el, /\w/.test($el.text() || ""),
                    "This button does not contain any inner text");
            }

            if ($el.is("[type='image']")) {
                return assert($el, /\w/.test($el.attr("alt") || ""),
                    "Image inputs must have non-empty alt-text associated " +
                    "with them");
            }

            return assert($el, this.hasValidLabel($el),
                "This input does not have a valid label associated with it");
        });
    }

    cleanup() {
        // Remove all label annotations generated by this plugin
        $("." + LABEL_CLASS).remove();
    }
}

module.exports = LabelsPlugin;
